services:
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    tmpfs:
      - /var/cache/nginx
      - /var/run
    depends_on:
      - api
    networks:
      - vohrad

  certbot:
    image: certbot/dns-route53
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-west-1}
    command: certonly --dns-route53 --keep-until-expiring --email ${CERTBOT_EMAIL} -d ${DOMAIN} -d *.${DOMAIN} --agree-tos --non-interactive
    profiles:
      - ssl-setup

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file:
      - .env.production
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - vohrad
    mem_limit: 512m
    mem_reservation: 256m

  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.production
    environment:
      DB_HOST: db
      DB_PORT: "5432"
    volumes:
      - ./keys:/app/keys:ro
      - logs_data:/app/logs
    networks:
      - vohrad
    mem_limit: 1g
    mem_reservation: 512m

  # Backup service for automated database backups
  backup:
    image: postgres:16-alpine
    restart: "no"
    env_file:
      - .env.production
    volumes:
      - db_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    networks:
      - vohrad
    command: |
      sh -c '
        echo "Creating backup at $$(date)"
        export PGPASSWORD="$POSTGRES_PASSWORD"
        pg_dump -h db -U "$POSTGRES_USER" -d "$POSTGRES_DB" > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        echo "Backup completed"
        # Keep only last 7 days of backups
        find /backups -name "backup_*.sql" -type f -mtime +7 -delete
      '
    profiles:
      - backup

networks:
  vohrad:
    driver: bridge

volumes:
  db_data:
    driver: local
  logs_data:
    driver: local
